//Sharanya Raghunath 11250416 assign4.c
#include "assign4.h"
#include <stdio.h>
#include <string.h>

int fat[32];
char filename[30][80];
int s_sector[30];
int count_file;

int main(){
	
	char temp[80];
	char com[80];
	char fname[80];
	int num = 0;
	int firstfreesec;
	int delsec,startsec;
	
	read_dir();
	read_fat();
	
	printf(":");
	gets(temp);
	sscanf(temp, "%s %s %d", com, fname, &num);
	
	while(strcmp(com, "quit") != 0) {

		
		if(strcmp(com, "dir") == 0) {
			print_dir();
		}
		
		
		if(strcmp(com, "add") == 0) {
			if (does_file_exist_in_dir(fname) != -1) {
				printf("File already exists\n");
			
				
			}else if (is_dir_full() == 0) {
				printf("Directory is full\n");
				
				
				}else if (free_sectors() < num) {
					printf("Not enough free sectors\n");
					
					
					}else if (num != 0) {
						
						firstfreesec = first_free_sector();
						allocate_sectors(firstfreesec, num);
						add_file_to_dir(fname,firstfreesec);
						
						num = 0;
						
						save_dir();
						save_fat();
						
					}
		}
		
		
		
		if(strcmp(com, "delete") == 0) {
			delsec = does_file_exist_in_dir(fname);
			startsec = s_sector[delsec];
			
			if (delsec == -1) {				
				printf("File does not exist\n");
				
			}else {
				delete_file_from_dir(delsec);
				deallocate_sectors(startsec);
				
				save_dir();
				save_fat();
				
			}
		}
		
		
		if(strcmp(com, "sectors") == 0) {
			
			if (does_file_exist_in_dir(fname) == -1) {
				printf("File does not exist\n");
				
			}else {
				print_sector_chain(s_sector[does_file_exist_in_dir(fname)]);
			}
			
		}
		
		
		printf(":");
		gets(temp);
		sscanf(temp, "%s %s %d", com, fname, &num);
		
	}
	
	return 1;
}

fac.c
#include "assign4.h"
#include <stdio.h>
#include <string.h>


void read_fat(void) {
	
	int i = 0;
	
	FILE *f;
	f = fopen("fat.dat","rb");
	
	if (f == NULL ) {
		
		printf("Could not open the fat.dat file");
		return;
		
	}
	
	
	while (fscanf(f, "%d", &fat[i]) != EOF){
		i++;
	}
	
	fclose(f);
}



void save_fat(void) {
	
	int i;
	
	FILE *g;
	g = fopen("fat.dat","w");
	
	for (i=0; i<32; i++){
		
		fprintf(g,"%d\n",fat[i]);

	}
	
	fclose(g);
}


int free_sectors(void) {
	
	int i = 0;
	int counter = 0;
	
	for (i=0; i<32; i++) {
		
		if (fat[i] == 1) {
			counter++;
			
		}
	}
	return counter;
}

int first_free_sector(void) {
	int i = 0;
	for (i=2; i<32; i++) {
		if (fat[i] == 1) {
			return i;
		}
	}
	
	return -1;
}


void allocate_sectors(int start_sector, int n) {
	
	int i, sector;
	
		for (i=0; i <(n - 1); i++) {
			
			sector = start_sector;
			fat[start_sector] = -1;
			fat[sector] = first_free_sector();
			start_sector = fat[sector];
			
		}
		
		fat[start_sector] = 0;
		save_fat();
}


void deallocate_sectors(int start_sector) {
	
	int i;
	
	while (fat[start_sector] != 0){
		
		i = fat[start_sector];
		fat[start_sector] = 1;
		start_sector =i;
		
	}
	
	fat[start_sector] = 1;
	save_fat();
	
}

void print_sector_chain(int start_sector) {
	
	while (fat[start_sector] != 0){
		
		printf ("%d ", start_sector);
		start_sector = fat[start_sector];
		
	}
	
	printf ("%d\n", start_sector);
	
}

dir.c
#include "assign4.h"
#include <stdio.h>
#include <string.h>


void read_dir(void) {
	
	int i = 0;
	count_file =0;
	
	FILE *h;
	h = fopen("dir.dat","rb");
	
	if (h == NULL ) {
		
		printf("Could not open the dir.dat file");
		return;
		
	}
	
	
	while (fscanf(h, "%s %d", filename[i], &s_sector[i]) != EOF){		
		i++;
	}
	
	count_file = i;
	fclose(h);
	
}



void save_dir(void) {
	
	int i;
	
	FILE *k;
	k = fopen("dir.dat","w");
	
	for (i=0; i<count_file ; i++){
		
		fprintf(k,"%s %d\n", filename[i], s_sector[i]);
	}
	
	fclose(k);
}



void print_dir(void) {
	
	int i;
	
	for (i=0; i<count_file ; i++){
			printf("%s %d\n", filename[i], s_sector[i]);
	}
}


int does_file_exist_in_dir(char *file) {
	
	int i;
	
	for (i=0; i<count_file ; i++){
		
		if (strcmp(file, filename[i]) == 0) {
			return i;
			
		}
	}
	
	return -1;
}

int is_dir_full(void){
	
	if (count_file == 30) {
		return 0;
		
	}
	return 1;
}

void add_file_to_dir(char *file, int start_sector) {
	
	strcpy(filename[count_file],file); 
	s_sector[count_file] = start_sector;
	count_file++; 
	
}

void delete_file_from_dir(int position) { 
	
	int i;
	
	for (i = position; i <count_file -1; i++) {
		
		strcpy(filename[i],filename[i+1]);
		s_sector[i] = s_sector[i+1];
		
	}
	
	count_file--;
}

assign4.h
void read_fat(void);
void save_fat(void);
int  free_sectors(void);
int  first_free_sector(void);
void allocate_sectors(int start_sector, int n);
void deallocate_sectors(int start_sector);
void print_sector_chain(int start_sector);


void read_dir(void);
void save_dir(void);
void print_dir(void);
int  does_file_exist_in_dir(char *file);
void add_file_to_dir(char *file, int start_sector);
void delete_file_from_dir(int position);
int is_dir_full(void);


extern int fat[32];
extern char filename[30][80];
extern int s_sector[30];
extern int count_file;


makefile
assign4.exe : assign4.o dir.o fat.o
	g++ -fno-common -Wall -o assign4.exe assign4.o dir.o fat.o
assign4.o : assign4.c
	g++ -fno-common -Wall -c assign4.c
dir.o : dir.c assign4.h
	g++ -fno-common -Wall -c dir.c
fat.o : fat.c assign4.h
	g++ -fno-common -Wall -c fat.c

